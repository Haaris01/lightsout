{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport { randFix } from \"./helpers.js\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        for (var j = 0; j < this.props.ncols; j++) {\n          board[i][j].push(rand);\n        }\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAroundMe\",\n    value: function flipCellsAroundMe(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tblBoard = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          var coord = \"\".concat(i, \"-\").concat(j);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: this.state.board[i][j],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 11\n            }\n          }));\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: []\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/haaris/Desktop/React/12_lights-out-game_colt/src/Board.js"],"names":["React","Component","Cell","randFix","Board","props","state","hasWon","board","createBoard","i","nrows","j","ncols","push","rand","coord","split","map","Number","y","x","flipCell","tblBoard","row","defaultProps","chanceLightStartsOn"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport {randFix} from \"./helpers.js\" \n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows : 5,\n    ncols : 5,\n    chanceLightStartsOn : [\n    ],\n  }\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasWon: false,\n      board : this.createBoard(),\n    }\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let i=0; i<this.props.nrows; i++){\n      for(let j=0; j<this.props.ncols; j++){\n        board[i][j].push(rand);\n      }\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAroundMe(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    const tblBoard = [];\n\n    for(let i = 0; i < this.props.nrows; i++) {\n      let row = [];\n\n      for(let j = 0; j < this.props.ncols; j++) {\n        let coord = `${i}-${j}`\n        row.push(\n          <Cell \n          key = {coord}\n          isLit = {this.state.board[i][j]}\n\n          />\n        )\n      }\n    }\n\n    return(\n      <div>\n\n      </div>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}