{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // [false,false,false,false,false],\n      //   [false,false,false,false,false],\n      //   [false,false,false,false,true],\n      //   [false,false,false,true,true],\n      //   [false,false,false,false,true],\n      // TODO: create array-of-arrays of true/false values\n      // for (let y = 0; y < this.props.nrows; y++) {\n      //   let row = [];\n      //   for (let x = 0; x < this.props.ncols; x++) {\n      //     row.push(Math.random() < this.props.chanceLightStartsOn);\n      //   }\n      //   board.push(row);\n      // }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x);\n      flipCell(y + 1, x);\n      flipCell(y - 1, x);\n      flipCell(y, x + 1);\n      flipCell(y, x - 1); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"maketable\",\n    value: function maketable() {\n      var _this2 = this;\n\n      var tblBoard = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        var _loop = function _loop(j) {\n          var coord = \"\".concat(i, \"-\").concat(j);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[i][j],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 11\n            }\n          }));\n        };\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          _loop(j);\n        }\n\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }, tblBoard));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, this.state.hasWon ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Winner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }\n      }, \"You\"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }\n      }, \"Win!\")) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }\n      }, this.maketable())); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/haaris/Desktop/React/12_lights-out-game_colt/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","coord","ncols","nrows","split","map","Number","y","x","flipCell","every","row","cell","setState","tblBoard","i","j","push","flipCellsAround","maketable","defaultProps","chanceLightStartsOn"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25,\n  }\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    }\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    const board = [];\n    // [false,false,false,false,false],\n    //   [false,false,false,false,false],\n    //   [false,false,false,false,true],\n    //   [false,false,false,true,true],\n    //   [false,false,false,false,true],\n    // TODO: create array-of-arrays of true/false values\n    // for (let y = 0; y < this.props.nrows; y++) {\n    //   let row = [];\n    //   for (let x = 0; x < this.props.ncols; x++) {\n    //     row.push(Math.random() < this.props.chanceLightStartsOn);\n    //   }\n    //   board.push(row);\n    // }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    const hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n\n  /** Render game board or winning message. */\n  maketable() {\n    const tblBoard = [];\n    for (let i = 0; i < this.props.nrows; i++) {\n      let row = [];\n      for (let j = 0; j < this.props.ncols; j++) {\n        let coord = `${i}-${j}`\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[i][j]}\n            flipCellsAroundMe={() => { this.flipCellsAround(coord) }}\n          />\n        )\n      }\n      tblBoard.push(<tr key={i}>{row}</tr>);\n    }\n    return (\n      <table className=\"Board\">\n        <tbody>\n          {tblBoard}\n        </tbody>\n      </table>\n    )\n  }\n\n  render() {\n\n    return(\n      <div>\n        {this.state.hasWon ? \n          (\n            <div className = \"Winner\">\n              <span>You</span>\n              <span>Win!</span>\n            </div>\n          )\n          :\n          (\n            <div>\n              {this.maketable()}\n            </div>\n          )\n        }\n      </div>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}