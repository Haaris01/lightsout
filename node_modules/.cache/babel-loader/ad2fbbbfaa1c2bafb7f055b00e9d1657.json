{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\haaris\\\\Desktop\\\\React\\\\12_lights-out-game_colt\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport { randFix } from \"./helpers.js\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var _row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(_row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x);\n      flipCell(y + 1, x);\n      flipCell(y - 1, x);\n      flipCell(y, x + 1);\n      flipCell(y, x - 1); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.every(row); // this.setState({board, hasWon});\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tblBoard = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var _row2 = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          var coord = \"\".concat(i, \"-\").concat(j);\n\n          _row2.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: this.state.board[i][j],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 11\n            }\n          }));\n        }\n\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }\n        }, _row2));\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }\n      }, tblBoard)); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/haaris/Desktop/React/12_lights-out-game_colt/src/Board.js"],"names":["React","Component","Cell","randFix","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","tblBoard","i","j","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;AAMJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAG,MAAKC,WAAL;AAFG,KAAb,CAHiB,CAOjB;;AAPiB;AAQlB;AAED;;;;;kCAEc;AACZ,UAAID,KAAK,GAAG,EAAZ,CADY,CAEZ;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YAAIE,IAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCD,UAAAA,IAAG,CAACG,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgB,KAAKZ,KAAL,CAAWa,mBAApC;AACD;;AACDV,QAAAA,KAAK,CAACO,IAAN,CAAWH,IAAX;AACD;;AACD,aAAOJ,KAAP;AACD;AAED;;;;oCAEgBW,K,EAAO;AAAA,wBACA,KAAKd,KADL;AAAA,UAChBS,KADgB,eAChBA,KADgB;AAAA,UACTH,KADS,eACTA,KADS;AAErB,UAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFqB,6BAGRW,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBZ,CAHgB;AAAA,UAGbG,CAHa;;AAKrB,eAASU,QAAT,CAAkBb,CAAlB,EAAqBG,CAArB,EAAwB;AACtB;AACA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGC,KAAd,IAAuBJ,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGC,KAAzC,EAAgD;AAC9CH,UAAAA,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,IAAc,CAACL,KAAK,CAACE,CAAD,CAAL,CAASG,CAAT,CAAf;AACD;AACF,OAVoB,CAWrB;;;AACAU,MAAAA,QAAQ,CAACb,CAAD,EAAGG,CAAH,CAAR;AACAU,MAAAA,QAAQ,CAACb,CAAC,GAAC,CAAH,EAAKG,CAAL,CAAR;AACAU,MAAAA,QAAQ,CAACb,CAAC,GAAC,CAAH,EAAKG,CAAL,CAAR;AACAU,MAAAA,QAAQ,CAACb,CAAD,EAAGG,CAAC,GAAC,CAAL,CAAR;AACAU,MAAAA,QAAQ,CAACb,CAAD,EAAGG,CAAC,GAAC,CAAL,CAAR,CAhBqB,CAkBrB;AACA;;AACA,UAAMN,MAAM,GAAGC,KAAK,CAACgB,KAAN,CAAYZ,GAAZ,CAAf,CApBqB,CAsBrB;AACD;AAGD;;;;6BAES;AACP,UAAMa,QAAQ,GAAG,EAAjB;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKrB,KAAL,CAAWM,KAA9B,EAAqCe,CAAC,EAAtC,EAA0C;AACxC,YAAId,KAAG,GAAG,EAAV;;AACA,aAAI,IAAIe,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKtB,KAAL,CAAWS,KAA9B,EAAqCa,CAAC,EAAtC,EAA0C;AACxC,cAAIR,KAAK,aAAMO,CAAN,cAAWC,CAAX,CAAT;;AACAf,UAAAA,KAAG,CAACG,IAAJ,eACE,oBAAC,IAAD;AACA,YAAA,GAAG,EAAII,KADP;AAEA,YAAA,KAAK,EAAI,KAAKb,KAAL,CAAWE,KAAX,CAAiBkB,CAAjB,EAAoBC,CAApB,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AACDF,QAAAA,QAAQ,CAACV,IAAT,eAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKH,KAAL,CAAd;AACD;;AAED,0BACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCa,QADD,CADF,CADF,CAhBO,CAuBP;AAEA;AAEA;AAEA;AACD;;;;EA3FiBxB,S;;AAAdG,K,CACGwB,Y,GAAe;AACpBjB,EAAAA,KAAK,EAAG,CADY;AAEpBG,EAAAA,KAAK,EAAG,CAFY;AAGpBI,EAAAA,mBAAmB,EAAG;AAHF,C;AA8FxB,eAAed,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport {randFix} from \"./helpers.js\" \n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows : 5,\n    ncols : 5,\n    chanceLightStartsOn : 0.25,\n  }\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasWon: false,\n      board : this.createBoard(),\n    }\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    flipCell(y,x);\n    flipCell(y+1,x);\n    flipCell(y-1,x);\n    flipCell(y,x+1);\n    flipCell(y,x-1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    const hasWon = board.every(row)\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    const tblBoard = [];\n    for(let i = 0; i < this.props.nrows; i++) {\n      let row = [];\n      for(let j = 0; j < this.props.ncols; j++) {\n        let coord = `${i}-${j}`\n        row.push(\n          <Cell\n          key = {coord}\n          isLit = {this.state.board[i][j]}\n          />\n        )\n      }\n      tblBoard.push(<tr>{row}</tr>);\n    }\n\n    return(\n      <table className=\"Board\">\n        <tbody>\n        {tblBoard}\n        </tbody>\n      </table>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}